% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by NFTOOL
%
% This script assumes these variables are defined:
%
%   houseInputs - input data.
%   houseTargets - target data.

load test_data
load label


n = size(test_data, 2);

index = randperm(n, floor(n * 0.9));

index2 = setdiff([1:n], index);
 
inputs = test_data(:,index); %houseInputs;
targets = label(:,index); %houseTargets;

inputs2 = test_data(:,index2); 
targets2= label(:,index2); 
 
% Create a Fitting Network
%hiddenLayerSize = 10;
%net = fitnet(hiddenLayerSize);

trainFcn = 'trainlm';

hiddenLayer1Size = 10;
hiddenLayer2Size = 10;
hiddenLayer3Size = 10;
hiddenLayer4Size = 10;
hiddenLayer5Size = 10;
hiddenLayer6Size = 10;

net = fitnet([hiddenLayer1Size hiddenLayer2Size],  trainFcn);

net = fitnet([hiddenLayer1Size hiddenLayer2Size hiddenLayer3Size hiddenLayer4Size],  trainFcn);

net = fitnet([hiddenLayer1Size hiddenLayer2Size hiddenLayer3Size hiddenLayer4Size hiddenLayer5Size hiddenLayer6Size],  trainFcn);

% Set up Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 80/100;
net.divideParam.valRatio = 5/100;
net.divideParam.testRatio = 15/100;
 
% Train the Network
[net,tr] = train(net,inputs,targets);
 
% Test the Network
outputs = net(inputs);
errors = gsubtract(outputs,targets);
performance = perform(net,targets,outputs)

% Test
outputs2 = net(inputs2);
errors2 = gsubtract(outputs2,targets2);

%%% Fully connected layer
location_error = vecnorm(errors2) * 0.3;
cdfplot(location_error);
hold on;

%% SRGAN
%location_errorSR = vecnorm(errors2) * 0.06;
%cdfplot(location_errorSR);


 
% View the Network
view(net)
 
% Plots
% Uncomment these lines to enable various plots.
% figure, plotperform(tr)
% figure, plottrainstate(tr)
% figure, plotfit(targets,outputs)
% figure, plotregression(targets,outputs)
% figure, ploterrhist(errors)

%% Test KNN

%%